/*
 * Author Student : Marko Dragojevic, RA63-2014
 *
 * Created on 24.10.2017.
 *
 * Solution of longest line in binary image problem, using queue
 *
 * Problem of longest line is to find longest sequence of ones that doesn't contain
 * crossing with other line, or isn't part of double line.
 *
 * For example:
 *
 * 11100
 * 10000
 * 10000
 *
 * This line is valid and it's length is five, but:
 *
 * 11100
 * 11000
 * 10000
 *
 * This sequence is not valid because there is small sequence of double line.
 *
 * For solution implementation, queue structure is used (Implemented as double linked list),
 * and there is no recursion in this solution.
 * Input file needs to be provided in which matrix of ones and zeros is provided. First dimensions of
 * provided matrix are checked. If they are not valid, for example, not all rows are same length.
 * After this inital check, matrix from text file is loaded into internal matrix, which is then extended
 * (extension is done for simplifying purposes of search algorithm) and then is processed. After that length
 * of longest line is returned.
 * If no valid line is found, zero shall be returned.
 *
 * Both modules (queue, and binary_image) are c99 compliant, and both modules aren't misra C compliant,
 * because they both use dynamic memory allocation and freeing.
 *
 * Queue module is implemented as generic as possible. It can hold any type of values. Standard types or user defined
 * structures. It is implemented as double linked list.
 *
 */

#include <stdio.h>
#include <assert.h>
#include "binary_image.h"

//#define LIB_DEBUG

int_least32_t main();
#ifdef LIB_DEBUG
static void print_queue(const queue_t* queue);
#endif

/*
 * Function used for debuging of matrix, walks through matrix and prints values
 */
static void print_matrix(dot_t** matrix, const int_least8_t width, const int_least8_t height);

int_least32_t main()
{
	FILE* file_descriptor;
	file_descriptor = fopen("input.txt", "r");
	int_least8_t width = 0;
	int_least8_t height = 0;
	dot_t** matrix = NULL;
	int_least8_t longest_line = 0;

	int_least8_t num = check_matrix_size(file_descriptor, &width, &height);
	printf("Return val: %"PRIdLEAST8", W: %"PRIdLEAST8", H: %"PRIdLEAST8"\n", num, width, height);

	if(num == TRUE){
		matrix = load_matrix(file_descriptor, width, height);
		assert(matrix != NULL);
		print_matrix(matrix, width, height);

		matrix = extend_matrix(matrix, &width, &height);

		printf("New size W: %"PRIdLEAST8", H: %"PRIdLEAST8" \n", width, height);
		print_matrix(matrix, width, height);

		longest_line = find_longest_line(matrix, width, height);

		free_matrix(matrix, width);
	}

	printf("Longest line: %"PRIdLEAST8"\n", longest_line);
	printf("\nEND!\n");

#ifdef LIB_DEBUG
	queue_t* queue = create_queue();

	assert(is_empty(queue));

	int_least8_t num1 = 5;
	int_least8_t num2 = 6;
	int_least8_t num3 = 7;
	int_least8_t num4 = 8;
	int_least8_t num5 = 9;


	printf("Queue is empty: %"PRIdLEAST8"\n", is_empty(queue));

	node_t* node = create_node((void*)&num1, sizeof(num));
	enqueue(queue, node);

	node = create_node((void*)&num2, sizeof(num));
	enqueue(queue, node);
	node = create_node((void*)&num3, sizeof(num));
	enqueue(queue, node);
	node = create_node((void*)&num4, sizeof(num));
	enqueue(queue, node);
	node = create_node((void*)&num5, sizeof(num));
	enqueue(queue, node);

	printf("Queue is empty: %"PRIdLEAST8"\n", is_empty(queue));

	print_queue(queue);

	empty_queue(queue);
	assert(is_empty(queue));
	printf("Queue is empty: %"PRIdLEAST8"\n", is_empty(queue));


	delete_queue(queue);
#endif

	return EXIT_SUCCESS;
}
#ifdef LIB_DEBUG
static void print_queue(const queue_t* queue)
{
	printf("\nPrinting queue\n");
	if(is_empty(queue) == FALSE)
	{
		node_t* temp = queue->head;
		int_least8_t* temp_struct = (int_least8_t*)temp->value;
		while(temp != NULL){
			temp_struct = (int_least8_t*)temp->value;
			printf("%"PRIdLEAST8"\n", *temp_struct);
			temp = temp->next;
		}
	}
	else
	{
		printf("\nQueue is empty!\n");
	}
}
#endif
void static print_matrix(dot_t** matrix, const int_least8_t width, const int_least8_t height)
{
	int_least8_t x;
	int_least8_t y;

	for(y = 0; y < height; y++)
	{
		for(x = 0; x < width; x++)
		{
			printf("%"PRIdLEAST8" ", matrix[x][y].value);
		}
		printf("\n");
	}
}
