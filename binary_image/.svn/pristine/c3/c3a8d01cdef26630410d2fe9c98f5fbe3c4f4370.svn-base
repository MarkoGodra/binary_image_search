#ifndef __BINARY_IMAGE_H__
#define __BINARY_IMAGE_H__

#include <inttypes.h>
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <limits.h>
#include <stdlib.h>
#include "queue.h"

extern const int_least8_t MAX_WIDTH;
extern const int_least8_t MAX_HEIGHT;

/*
 * dot structure is needed do store value of input dot
 * value field holds exact value
 * field visited is used for memoization (To mark dot as visited durning search)
 * field fault is used to mark invalid dots (Parts of double line or crossing)
 */
typedef struct
{
	int_least8_t value;
	int_least8_t visited;
	int_least8_t fault;
}dot_t;

/*
 * This structure is used for storing dot position in queue.
 */
typedef struct
{
	int_least8_t x;
	int_least8_t y;
}position_t;

/*
 * From passed file pointer data is read and it's loaded into matrix,
 * also width and height of matrix need to provided
 * Pointer to matrix is returned
 */
dot_t** load_matrix(FILE* fp, const int_least8_t width, const int_least8_t height);

/*
 * Frees matrix that was acquired from load_matrix function
 */
void free_matrix(dot_t** matrix, const int_least8_t width);

/*
 * Checks size of input text that is held in file.
 * Returns TRUE if input text is in right format (Each collumn needs to be same length),
 * If matrix sizes are valid, width and height will be changed
 * Returns FALSE if input text is not in right format
 * Width and length will be set to INVALID
 */
int_least8_t check_matrix_size(FILE* fp, int_least8_t* width, int_least8_t* height);

/*
 * Walks through the matrix and searces for longest line.
 * Matrix and dimensinons are needed as inputs
 */
int_least8_t find_longest_line(dot_t** matrix, const int_least8_t width, const int_least8_t height);

/*
 * Extends matrix size, by two on each dimension and that suronding frame is filled
 * with zeros and those dots are set as visited so they won't be considered by search for
 * longest line.
 * Returns pointer to newly allocated (Extended) matrix
 * Also old matrix old matrix (Which is passed as input parameter)
 * is freed
 */
dot_t** extend_matrix(dot_t** matrix, int_least8_t* width, int_least8_t* height);

#endif
