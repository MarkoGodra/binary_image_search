#include <stdio.h>
#include <inttypes.h>
#include <assert.h>
#include "queue.h"
#include "binary_image.h"

//#define LIB_DEBUG
//#define MAT_LOGIC_DEBUG

int_least8_t main();
static void print_queue(const queue_t* queue);

int_least8_t main()
{
	FILE* file_descriptor;
	file_descriptor = fopen("input.txt", "r");
	int_least8_t** matrix = load_matrix(file_descriptor);

#ifdef MAT_LOGIC_DEBUG
	int** mat;
	int i;
	mat = (int*)malloc(5 * sizeof(int*));
	for(i = 0; i < 5; i++)
	{
		mat[i] = (int*)malloc(5 * sizeof(int));
	}

	for(i = 0; i < 5; i++)
	{
		int j;
		for(j = 0; j < 5; j++)
		{
			mat[i][j] = j;
		}
	}

	for(i = 0; i < 5; i++)
	{
		int j;
		for(j = 0; j < 5; j++)
		{
			printf("%d ", mat[i][j]);
		}
		printf("\n");
	}
#endif

#ifdef LIB_DEBUG
	queue_t* queue = create_queue();

	assert(is_empty(queue));

	int_least8_t num1 = 5;
	int_least8_t num2 = 6;
	int_least8_t num3 = 7;
	int_least8_t num4 = 8;
	int_least8_t num5 = 9;


	printf("Queue is empty: %"PRIdLEAST8"\n", is_empty(queue));

	node_t* node = create_node((void*)&num1);
	enqueue(queue, node);

	node = create_node((void*)&num2);
	enqueue(queue, node);
	node = create_node((void*)&num3);
	enqueue(queue, node);
	node = create_node((void*)&num4);
	enqueue(queue, node);
	node = create_node((void*)&num5);
	enqueue(queue, node);

	printf("Queue is empty: %"PRIdLEAST8"\n", is_empty(queue));

	print_queue(queue);

	empty_queue(queue);
	assert(is_empty(queue));
	printf("Queue is empty: %"PRIdLEAST8"\n", is_empty(queue));


	delete_queue(queue);
#endif

	return 0;
}

static void print_queue(const queue_t* queue)
{
	printf("\nPrinting queue\n");
	if(is_empty(queue) == FALSE)
	{
		node_t* temp = queue->head;
		int_least8_t* temp_struct = (int_least8_t*)temp->value;
		while(temp != NULL){
			temp_struct = (int_least8_t*)temp->value;
			printf("%"PRIdLEAST8"\n", *temp_struct);
			temp = temp->next;
		}
	}
	else
	{
		printf("\nQueue is empty!\n");
	}
}
